@using Todo.Data
@using Todo.Data.Entities
@using Todo.Services
@model Todo.Models.TodoLists.TodoListDetailViewmodel

@{
    ViewData["Title"] = $"List: {Model.Title}";
}

<h2>@ViewData["Title"]</h2>

<div>
    <a asp-action="Edit" asp-controller="TodoList" asp-route-todoListId="@Model.TodoListId">
        <strong>Edit list</strong>
    </a>
</div>

<div class="col-md-6">

    <div id="listItems">
        <partial name="~/Views/TodoList/_DetailPartial.cshtml" />
    </div>

    @* Add list item inline using partial view *@
    <partial name="~/Views/TodoItem/_CreatePartial.cshtml" model="@Model.newTodoItem" />
</div>

@section scripts{
    <script type="text/javascript">
        var form = document.forms["createTodoItem"];
        form.addEventListener("submit", function (ev) {

            var oOutput = document.querySelector("#listItems");
            var oData = new FormData(form);

            oData.append("TodoListId", @Model.TodoListId);
            oData.append("HideDoneItems", "@Model.HideItemsMarkedAsDone");
            oData.append("OrderBy", "@Model.OrderBy");

            var oReq = new XMLHttpRequest();
            oReq.open("POST", "/TodoList/CreateTodoItem", true);
            oReq.onload = function (oEvent) {
                if (oReq.status == 200) {
                    // Update list
                    oOutput.innerHTML = oReq.response;
                    // Reset form
                    $("#createTodoItem").find("#Title").val("");
                    $("#createTodoItem").find("#Importance").val("Medium");
                    $("#createTodoItem").find("#Rank").val("1");
                } else {
                    console.Log("Error " + oReq.status);
                }
            };

            oReq.send(oData);
            ev.preventDefault();
        }, false);

    </script>
}
